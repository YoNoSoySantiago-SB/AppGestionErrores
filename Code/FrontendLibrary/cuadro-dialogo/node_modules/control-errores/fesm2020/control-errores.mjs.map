{"version":3,"file":"control-errores.mjs","sources":["../../../projects/control-errores/src/lib/control-errores.service.ts","../../../projects/control-errores/src/lib/control-errores.module.ts","../../../projects/control-errores/src/public-api.ts","../../../projects/control-errores/src/control-errores.ts"],"sourcesContent":["import {\n  Component,\n  ErrorHandler,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  Injectable,\n  ViewChild,\n  Injector,\n  ReflectiveInjector,\n  Directive,\n  Inject,\n} from '@angular/core';\nimport { errorInfo, metodos } from './interfaz';\nimport {\n  HttpErrorResponse,\n  HttpClient,\n  HttpHandler,\n} from '@angular/common/http';\n\n/**\n * Trata de desempaquetar un error, verificando si tiene la propiedad de angular ngOriginalError, la cual crea una copia del error antes de ser manipulado.\n *\n * @param error El error a desempaquetar.\n * @return Si el error tiene la propiedad ngOriginalError, devuelve el valor de dicha propiedad; de lo contrario, devuelve el error original.\n */\nfunction tryToUnwrapZonejsError(error: unknown): unknown | Error {\n  return error && (error as { ngOriginalError: Error }).ngOriginalError\n    ? (error as { ngOriginalError: Error }).ngOriginalError\n    : error;\n}\n\n/**\n * Extrae información del error de una respuesta HTTP.\n *\n * @param error La respuesta HTTP.\n * @return Si el error es un objeto que cumple con la interfaz Error, devuelve el objeto; si es un evento de error y tiene un mensaje, devuelve el mensaje; si es una cadena, devuelve una cadena que indica el código de estado y el cuerpo de la respuesta; de lo contrario, devuelve el error original.\n */\nfunction extraerHttpErrro(error: HttpErrorResponse): string | Error {\n  if (EsErrorOErrorObjeto(error.error)) {\n    return error.error;\n  }\n\n  if (error.error instanceof ErrorEvent && error.error.message) {\n    return error.error.message;\n  }\n  if (typeof error.error === 'string') {\n    return `Servidor retorno el codigo  ${error.status} con cuerpo \"${error.error}\"`;\n  }\n\n  return error;\n}\n\ntype ErrorCandidate = {\n  name?: unknown;\n  message?: unknown;\n  stack?: unknown;\n};\n/**\n * Comprueba si un valor es un objeto de tipo Error o no.\n *\n * @param value El valor a comprobar.\n * @return True si el valor es un objeto de tipo Error, False en caso contrario.\n */\nfunction EsErrorOErrorObjeto(value: unknown): value is Error {\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (value === null || typeof value !== 'object') {\n    return false;\n  }\n\n  const candidate = value as ErrorCandidate;\n\n  return (\n    typeof candidate.name === 'string' &&\n    typeof candidate.name === 'string' &&\n    typeof candidate.message === 'string' &&\n    (undefined === candidate.stack || typeof candidate.stack === 'string')\n  );\n}\n/**\n * Crea un objeto que contiene información sobre un error, incluido el mensaje de error y el callstack.\n *\n * @param error El error a analizar.\n * @return Un objeto que contiene el mensaje de error y el callstack del error.\n */\nexport function crearMensajeObjeto(error: Error) {\n  //Obtiene los stack del error\n  const stack: any = error.stack;\n  if (!stack) {\n  }\n  const lines: string[] = stack.split('\\n');\n\n  const methodRegex: any = /at (.*) \\((.*):(\\d+):(\\d+)\\)/;\n  //Los separa por linea a cada error\n  let lineasAt: string = '';\n  lines.forEach((line) => {\n    lineasAt += line;\n  });\n  //retorna el mensaje del error y el callstack\n  const errorInfo: errorInfo = {\n    message: error.toString(),\n    method: lineasAt,\n  };\n\n  return errorInfo;\n}\n\n/**\n * Esta clase implementa la interfaz ErrorHandler y se encarga de manejar los errores que se producen\n * en la aplicación. Proporciona una función para extraer información sobre el error y generar un mensaje\n * de error para mostrar al usuario.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ControlErroresService implements ErrorHandler {\n  /**\n   * Constructor de la clase ControlErroresService.\n   */\n  constructor() {}\n\n  /**\n   * Esta función se encarga de manejar los errores que se producen en la aplicación.\n   * Si el error no es una HttpErrorResponse, extrae información sobre el error y genera un mensaje\n   * de error utilizando la función crearMensajeObjeto(). Si es una HttpErrorResponse, extrae información\n   * sobre el error utilizando la función extraerHttpErrro() y devuelve un mensaje de error vacío.\n   *\n   * @param error El error que se ha producido.\n   * @returns Una tupla que contiene información sobre el error y un mensaje de error para mostrar al usuario.\n   */\n  handleError(error: Error): [unknown, unknown] {\n    if (!(error instanceof HttpErrorResponse)) {\n      return [this.extractorErrorTipo(error), crearMensajeObjeto(error)];\n    } else {\n      return [this.extractorErrorTipo(error), ''];\n    }\n  }\n\n  /**\n   * Esta función se encarga de extraer información sobre el error dependiendo del tipo que sea.\n   * Si el error es una HttpErrorResponse, utiliza la función extraerHttpErrro() para extraer información\n   * sobre el error. Si el error es una cadena o un objeto de error, simplemente devuelve el error tal cual.\n   *\n   * @param errorCandidate El error del que se quiere extraer información.\n   * @returns La información extraída del error.\n   */\n  protected extractorErrorTipo(errorCandidate: unknown): unknown {\n    const error = tryToUnwrapZonejsError(errorCandidate);\n\n    if (error instanceof HttpErrorResponse) {\n      return extraerHttpErrro(error);\n    }\n\n    if (typeof error === 'string' || EsErrorOErrorObjeto(error)) {\n      return error;\n    }\n\n    // No extrae nada, devuelve el error por defecto\n    return null;\n  }\n}\n\nexport function createError(config?: Error): ControlErroresService {\n  return new ControlErroresService();\n}\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [HttpClientModule],\n  exports: [],\n})\nexport class ControlErroresModule {}\n","/*\n * Public API Surface of control-errores\n */\n\nexport * from './lib/control-errores.service';\nexport * from './lib/control-errores.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}