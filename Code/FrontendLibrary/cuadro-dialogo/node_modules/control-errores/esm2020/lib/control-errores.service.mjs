import { Injectable, } from '@angular/core';
import { HttpErrorResponse, } from '@angular/common/http';
import * as i0 from "@angular/core";
/**
 * Trata de desempaquetar un error, verificando si tiene la propiedad de angular ngOriginalError, la cual crea una copia del error antes de ser manipulado.
 *
 * @param error El error a desempaquetar.
 * @return Si el error tiene la propiedad ngOriginalError, devuelve el valor de dicha propiedad; de lo contrario, devuelve el error original.
 */
function tryToUnwrapZonejsError(error) {
    return error && error.ngOriginalError
        ? error.ngOriginalError
        : error;
}
/**
 * Extrae información del error de una respuesta HTTP.
 *
 * @param error La respuesta HTTP.
 * @return Si el error es un objeto que cumple con la interfaz Error, devuelve el objeto; si es un evento de error y tiene un mensaje, devuelve el mensaje; si es una cadena, devuelve una cadena que indica el código de estado y el cuerpo de la respuesta; de lo contrario, devuelve el error original.
 */
function extraerHttpErrro(error) {
    if (EsErrorOErrorObjeto(error.error)) {
        return error.error;
    }
    if (error.error instanceof ErrorEvent && error.error.message) {
        return error.error.message;
    }
    if (typeof error.error === 'string') {
        return `Servidor retorno el codigo  ${error.status} con cuerpo "${error.error}"`;
    }
    return error;
}
/**
 * Comprueba si un valor es un objeto de tipo Error o no.
 *
 * @param value El valor a comprobar.
 * @return True si el valor es un objeto de tipo Error, False en caso contrario.
 */
function EsErrorOErrorObjeto(value) {
    if (value instanceof Error) {
        return true;
    }
    if (value === null || typeof value !== 'object') {
        return false;
    }
    const candidate = value;
    return (typeof candidate.name === 'string' &&
        typeof candidate.name === 'string' &&
        typeof candidate.message === 'string' &&
        (undefined === candidate.stack || typeof candidate.stack === 'string'));
}
/**
 * Crea un objeto que contiene información sobre un error, incluido el mensaje de error y el callstack.
 *
 * @param error El error a analizar.
 * @return Un objeto que contiene el mensaje de error y el callstack del error.
 */
export function crearMensajeObjeto(error) {
    //Obtiene los stack del error
    const stack = error.stack;
    if (!stack) {
    }
    const lines = stack.split('\n');
    const methodRegex = /at (.*) \((.*):(\d+):(\d+)\)/;
    //Los separa por linea a cada error
    let lineasAt = '';
    lines.forEach((line) => {
        lineasAt += line;
    });
    //retorna el mensaje del error y el callstack
    const errorInfo = {
        message: error.toString(),
        method: lineasAt,
    };
    return errorInfo;
}
/**
 * Esta clase implementa la interfaz ErrorHandler y se encarga de manejar los errores que se producen
 * en la aplicación. Proporciona una función para extraer información sobre el error y generar un mensaje
 * de error para mostrar al usuario.
 */
export class ControlErroresService {
    /**
     * Constructor de la clase ControlErroresService.
     */
    constructor() { }
    /**
     * Esta función se encarga de manejar los errores que se producen en la aplicación.
     * Si el error no es una HttpErrorResponse, extrae información sobre el error y genera un mensaje
     * de error utilizando la función crearMensajeObjeto(). Si es una HttpErrorResponse, extrae información
     * sobre el error utilizando la función extraerHttpErrro() y devuelve un mensaje de error vacío.
     *
     * @param error El error que se ha producido.
     * @returns Una tupla que contiene información sobre el error y un mensaje de error para mostrar al usuario.
     */
    handleError(error) {
        if (!(error instanceof HttpErrorResponse)) {
            return [this.extractorErrorTipo(error), crearMensajeObjeto(error)];
        }
        else {
            return [this.extractorErrorTipo(error), ''];
        }
    }
    /**
     * Esta función se encarga de extraer información sobre el error dependiendo del tipo que sea.
     * Si el error es una HttpErrorResponse, utiliza la función extraerHttpErrro() para extraer información
     * sobre el error. Si el error es una cadena o un objeto de error, simplemente devuelve el error tal cual.
     *
     * @param errorCandidate El error del que se quiere extraer información.
     * @returns La información extraída del error.
     */
    extractorErrorTipo(errorCandidate) {
        const error = tryToUnwrapZonejsError(errorCandidate);
        if (error instanceof HttpErrorResponse) {
            return extraerHttpErrro(error);
        }
        if (typeof error === 'string' || EsErrorOErrorObjeto(error)) {
            return error;
        }
        // No extrae nada, devuelve el error por defecto
        return null;
    }
}
ControlErroresService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ControlErroresService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ControlErroresService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ControlErroresService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ControlErroresService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
export function createError(config) {
    return new ControlErroresService();
}
//# sourceMappingURL=data:application/json;base64,